0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.14.12
3 info using node@v4.2.4
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/alexn/projects/etherid-js',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/alexn/.npm/etherid-js/1.2.0/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/alexn/.npm/etherid-js/1.2.0/package.tgz',
9 verbose tar pack   '/Users/alexn/projects/etherid-js' ]
10 verbose tarball /Users/alexn/.npm/etherid-js/1.2.0/package.tgz
11 verbose folder /Users/alexn/projects/etherid-js
12 info prepublish etherid-js@1.2.0
13 verbose addLocalTarball adding from inside cache /Users/alexn/.npm/etherid-js/1.2.0/package.tgz
14 silly cache afterAdd etherid-js@1.2.0
15 verbose afterAdd /Users/alexn/.npm/etherid-js/1.2.0/package/package.json not in flight; writing
16 verbose afterAdd /Users/alexn/.npm/etherid-js/1.2.0/package/package.json written
17 silly publish { name: 'etherid-js',
17 silly publish   version: '1.2.0',
17 silly publish   description: 'EtherId.org API',
17 silly publish   main: 'src/etherid.js',
17 silly publish   directories: { test: 'tests' },
17 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/lexansoft/etherid-js.git' },
17 silly publish   keywords: [ 'ethereum', 'etherid' ],
17 silly publish   author: { name: 'Alexandre Naverniouk' },
17 silly publish   license: 'Apache-2.0',
17 silly publish   bugs: { url: 'https://github.com/lexansoft/etherid-js/issues' },
17 silly publish   homepage: 'https://github.com/lexansoft/etherid-js#readme',
17 silly publish   readme: '# etherid-js\nJavascript API for EtherID\n\n\n## Installation\n\n### In Node.js through npm\n\n```bash\n$ npm install etherid-js\n```\n\n\n### In the Browser through browserify\n\nSame as in Node.js, you just have to [browserify](https://github.com/substack/js-browserify) the code before serving it. \n\n### In the Browser through `<script>` tag\n\nMake the [etherid.min.js](/dist/etherid.min.js) available through your server and load it using a normal `<script>` tag, then you can require(\'etherid\'). See the [Demo HTML](/tests/test.html)  \n\n\n##Usage\n\n### Initialization of the Web3\n\nThe [Web3](https://github.com/ethereum/web3.js) object is needed. This is the proper way to init it, so it will work in the Mist browser.\n\n```javascript\nif(typeof web3 === \'undefined\')\n{\n    Web3 = require(\'web3\');\n    web3 = new Web3();            \n}\n\nif( web3.currentProvider == null )\n    web3.setProvider( new web3.providers.HttpProvider( ) );    \n```\n\n### Initialization of the EtherID object \n```javascript\nvar etherid = require(\'etherid\')\n```\n\n\n### Getting total number of registered domains\n\n```javascript\nEID.getNumberOfDomains( web3, function( error, result ) {\n    document.getElementById( "n_domains" ).innerHTML = result\n})\n```\nReturns total number of registered domains\n\n### Reading the domain record\n\nTo read the domain record you call:\n\n```javascript\netherid.getDomain( web3, {DOMAIN_NAME} )\n```\n{DOMAIN_NAME} can be a BigNumber, string or hex ( "0xNNNN.." )\n\nThe call returns a struct:\n\n```javascript\n{\n    domain      // Domain name (as BigNumber)\n    owner       // Address of the domain owner\n    expires     // The Ethereum Blockchin block number of expiration\n    price       // Selling Price if any\n    transfer    // The address for the domain transer\n    next_domain // Next domain name in the linked list\n    root_id     // First ID if any\n    domainStr   // UTF domain name\n    domainHex   // HEX domain name    \n}\n```\nExample:\n\n```javascript\ndomain = EID.getDomain( web3, "test", function( error, domain ) {\n    if( !error ) {\n        document.getElementById( "expires" ).innerHTML = domain.expires\n        document.getElementById( "owner" ).innerHTML = web3.toHex( domain.owner )\n        document.getElementById( "price" ).innerHTML = domain.price\n        document.getElementById( "transfer" ).innerHTML = web3.toHex( domain.transfer )\n        document.getElementById( "next" ).innerHTML = web3.toHex( domain.next_domain )\n        document.getElementById( "root_id" ).innerHTML = web3.toHex( domain.root_id )\n    }\n});\n```\n\n### Reading the domain ID\n\n```javascript\netherid.getId( web3, {DOMAIN_NAME}, {ID} )\n```\n\nBoth {DOMAIN_NAME} and {ID} can be a BigNumber, string or hex ( "0xNNNN.." )\n\nThe call returns a struct:\n\n```javascript\n{\n    name        // ID Name\n    nameStr     // ID UTF name\n    nameHex     // ID HEX name\n    \n    value       // Value\n    valueInt    // Value as Number\n    valueHex    // Value as HEX\n    valueStr    // Value as UTF\n            \n    next_id     // Next ID in the linked list\n    prev_id     // Previous ID in the linked list\n}\n```\nExample:\n\n```javascript\nEID.getId( web3, "test", "test_number", function( error, id ) {\n    if( !error ) \n        document.getElementById( "test_int" ).innerHTML = id.valueInt\n});\n\nEID.getId( web3, "test", "test_text", function( error, id ) {\n    if( !error ) document.getElementById( "test_text" ).innerHTML = id.valueStr\n});\n\nEID.getId( web3, "test", "test_ipfs", function( error, id ) {\n    if( !error ) document.getElementById( "test_ipfs" ).innerHTML = id.valueHash\n});\n```\n\n### Event handler\nYou can setup a handler that will be called everytime someone changes a domain.\n\n```javascript\netherid.watch( web3, function( error, result ) {\n    document.getElementById( "n_domains" ).innerHTML = EID.getNumberOfDomains( web3 )\n}) \n```\n\n### Enumerating domains\nYou can list all the registered domains by using getDomainEnum and getNextDomain\n\n\n```javascript\nDomainEnumerator = etherid.getDomainEnum( web3 )\n\nd = EID.getNextDomain( web3, DomainEnumerator )\n\nwhile ( d ) {\n    document.getElementById( "list_domains" ).innerHTML = "domain #:" + DomainEnumerator.n + " " + d.domainStr\n    d = EID.getNextDomain( web3, DomainEnumerator )\n}\n```\nNOTE: The enumerator properly treats the domain with name 0x0 registered in the system. If you implement the loop yourself, do not forget that first 0x0 domain you get is the real domain, and the second is in fact the end of the list.\n\n### Enumerating ID\'s\nYou can list all the domain ID\'s by using getIdEnum and getNextId\n\n\n```javascript\nIdEnumerator = etherid.getIdEnum( web3, "test" )\n\nid = EID.getNextId( web3, IdEnumerator )\n\nwhile ( id ) {\n    document.getElementById( "list_domains" ).innerHTML = "ID #:" + Id.n + " " + id.nameStr\n    id = EID.getNextId( web3, IdEnumerator )\n}\n```\nNOTE: The enumerator properly treats the ID with name 0x0 registered in the system. If you implement the loop yourself, do not forget that first 0x0 ID you get might be the real ID, and the second is in fact the end of the list. You should check if the 0x0 ID has value.\n\n\n### Changing domain\nTo cahnge the domain record call:\n\n```javascript\nEID.changeDomain( web3, {ADDRESS_TO USE}, {DOMAIN}, {EXPIRATION}, {PRICE}, TRANSFER}, callback )\n```\n\n\nExample:\n\n```javascript\nfunction onProlong()\n{\n    document.getElementById( "prolong_status" ).innerHTML = "Reading domain..."\n    \n    \n    domain = EID.getDomain( web3, "test", function( error, domain ) {\n        if( !error ) {\n            document.getElementById( "prolong_status" ).innerHTML = "Channging..."\n            EID.changeDomain( web3, domain.owner, "test", 2000000, 0, 0, function( error, domain ) {\n                if( !error ) {\n                    document.getElementById( "prolong_status" ).innerHTML = "Transaction completed"\n                }\n                else\n                {\n                    document.getElementById( "prolong_status" ).innerHTML = error\n                }\n            });    \n        }\n        else { document.getElementById( "prolong_status" ).innerHTML = error }\n    });    \n}\n```\n\n### Changing ID\nTo cahnge the domain ID call:\n\n```javascript\nEID.changeId( web3, {ADDRESS_TO USE}, {DOMAIN}, {ID}, {VALUE} callback )\n```\n\n\nExample:\n\n```javascript\nfunction onChangeId()\n{\n    document.getElementById( "change_id_status" ).innerHTML = "Reading domain..."\n    \n    \n    domain = EID.getDomain( web3, "test", function( error, domain ) {\n        if( !error ) {\n            document.getElementById( "change_id_status" ).innerHTML = "Channging..."\n            EID.changeId( web3, domain.owner, "test", "time", new Date().getTime(), function( error, domain ) {\n                if( !error ) {\n                    document.getElementById( "change_id_status" ).innerHTML = "Transaction completed"\n                }\n                else\n                {\n                    document.getElementById( "change_id_status" ).innerHTML = error\n                }\n            });    \n        }\n        else { document.getElementById( "change_id_status" ).innerHTML = error }\n    });    \n}\n```\n\n## License\n\nApache 2.0\n\n\n##Author\n\nAlexandre Naverniouk\n@alexna\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'c8351a9b38bff06d6faa5bd303f8e1fd40a57bb4',
17 silly publish   _id: 'etherid-js@1.2.0',
17 silly publish   _shasum: 'd8b19efaeda45718aa4acb16cee8cd5f64e79239',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name etherid-js
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/etherid-js
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /Users/alexn/.npm/etherid-js/1.2.0/package.tgz
25 verbose request uri https://registry.npmjs.org/etherid-js
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 3:59:27 PM
28 verbose request using bearer token for auth
29 verbose request id 217f6c09fcbd39f4
30 http request PUT https://registry.npmjs.org/etherid-js
31 http 403 https://registry.npmjs.org/etherid-js
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=300',
32 verbose headers   'content-length': '95',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Mon, 01 Feb 2016 23:59:30 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-lax1425-LAX',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1454371167.959772,VS0,VE2463' }
33 verbose request invalidating /Users/alexn/.npm/registry.npmjs.org/etherid-js on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 1.2.0." : etherid-js
35 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
35 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
35 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
35 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:198:22)
35 verbose stack     at emitTwo (events.js:87:13)
35 verbose stack     at Request.emit (events.js:172:7)
35 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1082:10)
35 verbose stack     at emitOne (events.js:82:20)
35 verbose stack     at Request.emit (events.js:169:7)
35 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1009:12)
36 verbose statusCode 403
37 verbose pkgid etherid-js
38 verbose cwd /Users/alexn/projects/etherid-js
39 error Darwin 15.3.0
40 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
41 error node v4.2.4
42 error npm  v2.14.12
43 error code E403
44 error "You cannot publish over the previously published version 1.2.0." : etherid-js
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
